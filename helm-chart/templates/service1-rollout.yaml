{{- if .Values.service1.rollout.enabled }}
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: {{ .Values.service1.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "weather-forecast.labels" . | nindent 4 }}
    app: {{ .Values.service1.name }}
spec:
  replicas: {{ .Values.service1.rollout.replicas }}
  strategy:
    canary:
      maxSurge: {{ .Values.service1.rollout.strategy.canary.maxSurge }}
      maxUnavailable: {{ .Values.service1.rollout.strategy.canary.maxUnavailable }}
      steps:
      {{- range .Values.service1.rollout.strategy.canary.steps }}
      - {{- toYaml . | nindent 8 }}
      {{- end }}
      scaleDownDelaySeconds: {{ .Values.service1.rollout.strategy.canary.scaleDownDelaySeconds }}
      scaleDownDelayRevisionLimit: {{ .Values.service1.rollout.strategy.canary.scaleDownDelayRevisionLimit }}
      trafficRouting:
        istio:
          virtualService:
            name: {{ .Values.service1.name }}-vs
            routes:
            - primary
          destinationRule:
            name: {{ .Values.service1.name }}-dr
            canarySubsetName: canary
            stableSubsetName: stable
  selector:
    matchLabels:
      app: {{ .Values.service1.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.service1.name }}
        version: stable
      annotations:
        {{- if .Values.vault.enabled }}
        vault.security.banzaicloud.io/vault-addr: {{ .Values.vault.addr | quote }}
        vault.security.banzaicloud.io/vault-role: {{ .Values.vault.role | quote }}
        vault.security.banzaicloud.io/vault-skip-verify: {{ .Values.vault.skipVerify | quote }}
        {{- end }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.service1.targetPort | quote }}
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: {{ .Values.service1.name }}
        image: "{{ .Values.global.registry }}/{{ .Values.service1.image }}:{{ .Values.global.tag }}"
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service1.targetPort }}
        {{- if .Values.vault.enabled }}
        envFrom:
        - secretRef:
            name: {{ .Values.service1.name }}-vault-secret
        {{- else }}
        env:
        - name: SERVICE2_URL
          value: "http://{{ .Values.service2.name }}:{{ .Values.service2.port }}/condition"
        - name: LOG_LEVEL
          value: "info"
        {{- end }}
        resources:
          {{- toYaml .Values.service1.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.service1.targetPort }}
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: {{ .Values.service1.targetPort }}
          initialDelaySeconds: 5
          periodSeconds: 5
{{- end }}
