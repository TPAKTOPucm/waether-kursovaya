apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.service2.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "weather-forecast.labels" . | nindent 4 }}
    app: {{ .Values.service2.name }}
spec:
  replicas: {{ .Values.service2.replicaCount }}  # 1 реплика
  selector:
    matchLabels:
      app: {{ .Values.service2.name }}
      {{- include "weather-forecast.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ .Values.service2.name }}
        {{- include "weather-forecast.selectorLabels" . | nindent 8 }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.service2.targetPort | quote }}
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: {{ .Values.service2.name }}
        image: "{{ .Values.global.registry }}/{{ .Values.service2.image }}:{{ .Values.service2.tag }}"
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service2.targetPort }}
          name: http
        env:
        - name: LOG_LEVEL
          value: "info"
        resources:
          {{- toYaml .Values.service2.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
