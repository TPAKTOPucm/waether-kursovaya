{{- if .Values.service1.rollout.enabled }}
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: {{ .Values.service1.name }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "weather-forecast.labels" . | nindent 4 }}
    app: {{ .Values.service1.name }}
spec:
  replicas: {{ .Values.service1.rollout.replicas }}
  strategy:
    canary:
      canaryService: {{ .Values.service1.name }}-canary
      stableService: {{ .Values.service1.name }}-stable
      {{- if .Values.service1.rollout.strategy.canary.steps }}
      steps:
        {{- toYaml .Values.service1.rollout.strategy.canary.steps | nindent 8 }}
      {{- end }}
      analysis:
        templates:
        - templateName: success-rate
        args:
        - name: service-name
          value: {{ .Values.service1.name }}
        {{- if .Values.analysis.successRate.enabled }}
        successfulRunHistoryLimit: {{ .Values.analysis.successRate.successLimit }}
        unsuccessfulRunHistoryLimit: {{ .Values.analysis.successRate.failureLimit }}
        {{- end }}
  selector:
    matchLabels:
      app: {{ .Values.service1.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.service1.name }}
        version: stable
        {{- include "weather-forecast.selectorLabels" . | nindent 8 }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.service1.targetPort | quote }}
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: {{ include "weather-forecast.serviceAccountName" . }}
      volumes:
      - name: vault-secrets
        emptyDir: {}
      {{- if .Values.vault.enabled }}
      initContainers:
      - name: vault-init
        image: "{{ .Values.vault.initContainer.image }}"
        imagePullPolicy: {{ .Values.vault.initContainer.pullPolicy }}
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Authenticating with Vault..."
          
          JWT=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          
          VAULT_TOKEN=$(vault write -field=token \
            {{ .Values.vault.authPath }}/login \
            role={{ .Values.vault.role }} \
            jwt="$JWT")
          
          echo "Successfully authenticated"
          
          vault kv get -field=service2_url {{ .Values.vault.secretPath }} > /vault/secrets/service2_url
          echo "info" > /vault/secrets/log_level
          
          echo "Secrets retrieved"
        env:
        - name: VAULT_ADDR
          value: {{ .Values.vault.addr | quote }}
        - name: VAULT_SKIP_VERIFY
          value: {{ .Values.vault.skipVerify | quote }}
        volumeMounts:
        - name: vault-secrets
          mountPath: /vault/secrets
      {{- end }}
      containers:
      - name: {{ .Values.service1.name }}
        image: "{{ .Values.global.registry }}/{{ .Values.service1.image }}:{{ .Values.service1.tag }}"
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service1.targetPort }}
          name: http
        {{- if .Values.vault.enabled }}
        volumeMounts:
        - name: vault-secrets
          mountPath: /vault/secrets
          readOnly: true
        env:
        - name: SERVICE2_URL_FILE
          value: "/vault/secrets/service2_url"
        {{- else }}
        env:
        - name: SERVICE2_URL
          value: "http://{{ .Values.service2.name }}:{{ .Values.service2.port }}/condition"
        {{- end }}
        resources:
          {{- toYaml .Values.service1.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
{{- end }}
